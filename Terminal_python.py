import json
import os

DATA_FILE = "data.json"

# –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
GREEN = "\033[92m"
RED = "\033[91m"
BLUE = "\033[94m"
RESET = "\033[0m"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        people = json.load(f)
else:
    people = [
        {"–§–ò–û": "–ú–∏—Ç—Ä–æ—Ñ–∞–Ω–æ–≤ –ù–∏–∫–∏—Ç–∞ –î–º–∏—Ç—Ä–∏–µ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–û—Ç–∞–µ–≤ –§–∞—Ä—Ä—É—Ö–∂–æ–Ω –£–º–∞—Ä–∞–ª–∏–µ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 200, "–ø–æ–π–¥–µ—Ç": True},
        {"–§–ò–û": "–õ—É–≥–∞—Å—å–∫–æ–≤ –ê—Ä—Ç–µ–º –ü–∞–≤–ª–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö—É–ª–∞–∫–æ–≤ –ê—Ä—Å–µ–Ω–∏–π –û–ª–µ–≥–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö–æ—Ä–æ–±—Å–∫–æ–π –Æ—Ä–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö–æ—Ä–æ—Ç–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ì—Ä–∏–≥–æ—Ä—å–µ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ê–ª–∏–µ–≤ –≠–º–∏–Ω –≠–ª—å—Ö–∞–Ω–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–û—Å–º–∞–Ω–∫–∏–Ω –ö–∏—Ä–∏–ª–ª –ú–∞–∫—Å–∏–º–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–î—É–±–∏–Ω–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö–æ–Ω–æ–≤–∞–ª–æ–≤ –ê–Ω–¥—Ä–µ–π –î–º–∏—Ç—Ä–∏–µ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö–∞—Ä–∞–ø–µ—Ç—è–Ω –°–µ–≤–∞–∫ –õ–µ—Ä–Ω–∏–∫–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ë–∞–¥–∞—Å—è–Ω –î–∞–≤–∏—Ç –®–∞–∞–º–∏—Ä–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–õ–µ–¥–Ω–µ–≤–∞ –í–ª–∞–¥–∏—Å–ª–∞–≤–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ö–∞—Ä–ø–µ–Ω–∫–æ –î–∏–∞–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞", "—Å–∫–æ–ª—å–∫–æ": 0, "–ø–æ–π–¥–µ—Ç": False},
        {"–§–ò–û": "–ë–∞—Å–∏–ª–∞—à–≤–∏–ª–∏ –î–∞–Ω–∏–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á", "—Å–∫–æ–ª—å–∫–æ": 700, "–ø–æ–π–¥–µ—Ç": True},
    ]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(people, f, ensure_ascii=False, indent=4)
    print(f"{GREEN}–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {DATA_FILE}{RESET}")

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫—Ç–æ –ø–æ–π–¥–µ—Ç
def update_went():
    return {p["–§–ò–û"] for p in people if p["–ø–æ–π–¥–µ—Ç"]}

# –í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
def show_table():
    went = update_went()
    line = "-" * 100
    print(line)
    print(f"{BLUE}{'–ü–†–ò–Æ–¢':^100}{RESET}")
    print(line)
    print(f"{BLUE}{'‚Ññ':<4} {'–§–ò–û':<35} {'–°—É–º–º–∞':<10} {'–ü–æ–π–¥–µ—Ç':<6}{RESET}")
    print(line)
    for i, p in enumerate(people, 1):
        f = p["–§–ò–û"]
        if p["—Å–∫–æ–ª—å–∫–æ"] == 0:
            money = f"{RED}0 ‚ÇΩ{RESET}"
        else:
            money = f"{GREEN}{p['—Å–∫–æ–ª—å–∫–æ']:.2f}".rstrip('0').rstrip('.') + " ‚ÇΩ" + RESET
        went_mark = f"{GREEN}‚úì{RESET}" if f in went else f"{RED}‚úó{RESET}"
        print(f"{i:<4} {f:<35} {money:<10} {went_mark:<6}")
    print(line)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã
def add_money():
    for i, p in enumerate(people, 1):
        money = f'{p["—Å–∫–æ–ª—å–∫–æ"]:.2f}'.rstrip('0').rstrip('.')
        print(f"{i}. {p['–§–ò–û']} (—Ç–µ–∫—É—â–∞—è —Å—É–º–º–∞: {money} ‚ÇΩ)")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞: "))
        if 1 <= choice <= len(people):
            amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: "))
            people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] += amount
            if people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] > 0:
                people[choice - 1]["–ø–æ–π–¥–µ—Ç"] = True
            save_data()
            print(f"–°—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {people[choice - 1]['–§–ò–û']}")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –í—ã—á–∏—Ç–∞–Ω–∏–µ —Å—É–º–º—ã
def subtract_money():
    for i, p in enumerate(people, 1):
        print(f"{i}. {p['–§–ò–û']} (–°—É–º–º–∞: {p['—Å–∫–æ–ª—å–∫–æ']} ‚ÇΩ)")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞: "))
        if 1 <= choice <= len(people):
            amount = float(input("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã—á–µ—Å—Ç—å: "))
            people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] -= amount
            if people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] < 0:
                people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] = 0
            save_data()
            print(f"–°—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {people[choice - 1]['–§–ò–û']}")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –£–º–Ω–æ–∂–µ–Ω–∏–µ —Å—É–º–º—ã
def multiply_money():
    for i, p in enumerate(people, 1):
        print(f"{i}. {p['–§–ò–û']} (–°—É–º–º–∞: {p['—Å–∫–æ–ª—å–∫–æ']} ‚ÇΩ)")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞: "))
        if 1 <= choice <= len(people):
            factor = float(input("–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å: "))
            people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"] *= factor
            save_data()
            print(f"–°—É–º–º–∞ —É–º–Ω–æ–∂–µ–Ω–∞ –¥–ª—è {people[choice - 1]['–§–ò–û']}")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –î–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã
def split_money():
    for i, p in enumerate(people, 1):
        print(f"{i}. {p['–§–ò–û']} (–°—É–º–º–∞: {p['—Å–∫–æ–ª—å–∫–æ']} ‚ÇΩ)")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞: "))
        if 1 <= choice <= len(people):
            parts = int(input("–ù–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å—É–º–º—É? "))
            if parts == 0:
                print("–¢—ã –Ω–µ –ø–µ—Ä–≤—ã–π –∫—Ç–æ —ç—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª üòé")
            elif parts > 0:
                original = people[choice - 1]["—Å–∫–æ–ª—å–∫–æ"]
                divided = original / parts
                print(f"–°—É–º–º–∞ {original} ‚ÇΩ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞ –Ω–∞ {parts} —á–∞—Å—Ç–µ–π –ø–æ {divided:.2f} ‚ÇΩ")
            else:
                print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –û–±—â–∞—è —Å—É–º–º–∞
def total_sum():
    total = sum(p["—Å–∫–æ–ª—å–∫–æ"] for p in people)
    line = "-" * 75
    print(line)
    print(f"{BLUE}{'–û–ë–©–ê–Ø –°–£–ú–ú–ê –î–õ–Ø –ü–†–ò–Æ–¢–ê: ' + str(int(total)) + ' ‚ÇΩ':^100}{RESET}")
    print(line)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–ü–æ–π–¥–µ—Ç"
def change_status():
    for i, p in enumerate(people, 1):
        went_mark = "–î–∞" if p["–ø–æ–π–¥–µ—Ç"] else "–ù–µ—Ç"
        print(f"{i}. {p['–§–ò–û']} (–ü–æ–π–¥–µ—Ç: {went_mark})")
    try:
        choice = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: "))
        if 1 <= choice <= len(people):
            status_input = input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å '–î–∞' –∏–ª–∏ '–ù–µ—Ç': ").strip().lower()
            if status_input in ["–¥–∞", "yes", "y"]:
                people[choice - 1]["–ø–æ–π–¥–µ—Ç"] = True
            elif status_input in ["–Ω–µ—Ç", "no", "n"]:
                people[choice - 1]["–ø–æ–π–¥–µ—Ç"] = False
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
                return
            save_data()
            print(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è {people[choice - 1]['–§–ò–û']}")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞.")

# –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
def show_help():
    line = "-" * 75
    print(line)
    print(f"{BLUE}{'–¢–ï–†–ú–ò–ù–ê–õ –ü–†–ò–Æ–¢–ê - –ö–û–ú–ê–ù–î–´':^75}{RESET}")
    print(line)
    print("1. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º–∞–º–∏:")
    print("   add       ‚Üí –î–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.")
    print("   subtract  ‚Üí –í—ã—á–µ—Å—Ç—å —Å—É–º–º—É —É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.")
    print("   multiply  ‚Üí –£–º–Ω–æ–∂–∏—Ç—å —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.")
    print("   split     ‚Üí –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—É–º–º—É —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π")
    print("                (–µ—Å–ª–∏ –¥–µ–ª–∏—à—å –Ω–∞ 0, –≤—ã–≤–æ–¥–∏—Ç—Å—è: '–¢—ã –Ω–µ –ø–µ—Ä–≤—ã–π –∫—Ç–æ —ç—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª üòé').")
    print("   total     ‚Üí –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–∏—é—Ç–∞.")
    print("\n2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º:")
    print("   status    ‚Üí –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å '–ü–æ–π–¥–µ—Ç' –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.")
    print("\n3. –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:")
    print("   list      ‚Üí –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö –ª—é–¥–µ–π —Å –∏—Ö —Å—É–º–º–∞–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º.")
    print("   save      ‚Üí –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª (data.json).")
    print("\n4. –¢–µ—Ä–º–∏–Ω–∞–ª:")
    print("   start     ‚Üí –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.")
    print("   help      ‚Üí –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.")
    print("   exit      ‚Üí –í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.")
    print(line)
    print("–¶–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ:")
    print("   –°—É–º–º–∞ = 0 ‚ÇΩ  ‚Üí –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç")
    print("   –°—É–º–º–∞ > 0 ‚ÇΩ  ‚Üí –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç")
    print("   –°—Ç–∞—Ç—É—Å '–ü–æ–π–¥–µ—Ç' = –î–∞ ‚Üí –∑–µ–ª—ë–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ ‚úì")
    print("   –°—Ç–∞—Ç—É—Å '–ü–æ–π–¥–µ—Ç' = –ù–µ—Ç ‚Üí –∫—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç ‚úó")
    print(line)

# –¢–µ—Ä–º–∏–Ω–∞–ª
def terminal():
    running = False
    print("–í–≤–µ–¥–∏—Ç–µ 'start' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º.")
    while True:
        cmd = input("> ").strip().lower()
        if cmd == "exit":
            save_data()
            print("–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
            break
        elif cmd == "start":
            running = True
            print("–¢–µ—Ä–º–∏–Ω–∞–ª –∑–∞–ø—É—â–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: list, add, subtract, multiply, split, status, total, save, help, exit")
        elif not running:
            print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π 'start'.")
        elif cmd == "list":
            show_table()
        elif cmd == "add":
            add_money()
        elif cmd == "subtract":
            subtract_money()
        elif cmd == "multiply":
            multiply_money()
        elif cmd == "split":
            split_money()
        elif cmd == "status":
            change_status()
        elif cmd == "total":
            total_sum()
        elif cmd == "save":
            save_data()
        elif cmd == "help":
            show_help()
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: list, add, subtract, multiply, split, status, total, save, help, exit")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
terminal()
